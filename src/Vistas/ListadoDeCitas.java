/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vistas;

import AccesoADatos.CentroVacunacionData;
import AccesoADatos.CitaData;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Editor
 */
public class ListadoDeCitas extends javax.swing.JInternalFrame {

    /**
     * Creates new form ListadoDeCitas
     */
    private DefaultTableModel modelo = new DefaultTableModel();

    public ListadoDeCitas() {
        initComponents();
        modelo.addColumn("ID");
        modelo.addColumn("CIUDADANO");
        modelo.addColumn("FECHA");
        modelo.addColumn("CENTRO VACUNACION");
        jTable1.setModel(modelo);
    }
    
    private void borrarFilas(){
        int f = modelo.getRowCount() - 1;
        for (;f >= 0; f--) {
            modelo.removeRow(f);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jMonthChooser1 = new com.toedter.calendar.JMonthChooser();
        jRBCumplidas = new javax.swing.JRadioButton();
        jRBCanceladas = new javax.swing.JRadioButton();
        jRBVencidas = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();

        setClosable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(153, 153, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("LISTADO DE CITAS");

        jMonthChooser1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jMonthChooser1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jMonthChooser1PropertyChange(evt);
            }
        });

        jRBCumplidas.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jRBCumplidas.setText("Cumplidas");
        jRBCumplidas.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jRBCumplidas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBCumplidasActionPerformed(evt);
            }
        });

        jRBCanceladas.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jRBCanceladas.setText("Canceladas");
        jRBCanceladas.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jRBCanceladas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBCanceladasActionPerformed(evt);
            }
        });

        jRBVencidas.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jRBVencidas.setText("Vencidas");
        jRBVencidas.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jRBVencidas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBVencidasActionPerformed(evt);
            }
        });

        jTable1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(33, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jRBCumplidas)
                        .addGap(101, 101, 101)
                        .addComponent(jRBCanceladas)
                        .addGap(91, 91, 91)
                        .addComponent(jRBVencidas)
                        .addGap(54, 54, 54))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(179, 179, 179))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jMonthChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(200, 200, 200))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(jLabel1)
                .addGap(42, 42, 42)
                .addComponent(jMonthChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRBCanceladas)
                    .addComponent(jRBCumplidas)
                    .addComponent(jRBVencidas))
                .addGap(43, 43, 43)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(278, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(413, 0, 510, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/vacunas-1920-5.jpg"))); // NOI18N
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 425, 636));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMonthChooser1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jMonthChooser1PropertyChange
        
        if (jRBCumplidas.isSelected()) {
            jRBCanceladas.setSelected(false);
            jRBVencidas.setSelected(false);
            CentroVacunacionData cvd = new CentroVacunacionData();
            CitaData cd = new CitaData();
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("MM");
            try {
                borrarFilas();
                for (Entidades.Cita cita : cd.listarCitas()) {
                    String fechaString = cita.getFecha_cita().format(dtf);
                    int fechaCita = Integer.parseInt(fechaString);
                    if (cita.getEstado() == 1 && fechaCita - 1 == jMonthChooser1.getMonth()) {
                        modelo.addRow(new Object[]{cita.getId_cita(), cita.getCiudadano().getDni(), cita.getFecha_cita(), cvd.buscarCentroVacunacion(cita.getCentro_vacunacion()).getNombre()});
                    }

                }
            } catch (NullPointerException ex) {
                JOptionPane.showMessageDialog(this, "Seleccione una opcion para obtener las citas deseadas");
            }
        } else if (jRBCanceladas.isSelected()) {
            jRBCumplidas.setSelected(false);
            jRBVencidas.setSelected(false);
            CentroVacunacionData cvd = new CentroVacunacionData();
            CitaData cd = new CitaData();
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("MM");
            try {
                borrarFilas();
                for (Entidades.Cita cita : cd.listarCitas()) {
                    String fechaString = cita.getFecha_cita().format(dtf);
                    int fechaCita = Integer.parseInt(fechaString);
                    if (cita.getEstado() == 2 && fechaCita - 1 == jMonthChooser1.getMonth()) {
                        modelo.addRow(new Object[]{cita.getId_cita(), cita.getCiudadano().getDni(), cita.getFecha_cita(), cvd.buscarCentroVacunacion(cita.getCentro_vacunacion()).getNombre()});
                    }

                }
            } catch (NullPointerException ex) {
                JOptionPane.showMessageDialog(this, "Seleccione una opcion para obtener las citas deseadas");
            }
        } else if (jRBVencidas.isSelected()) {
            jRBCanceladas.setSelected(false);
            jRBCumplidas.setSelected(false);
            CentroVacunacionData cvd = new CentroVacunacionData();
            CitaData cd = new CitaData();
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("MM");
            try {
                borrarFilas();
                for (Entidades.Cita cita : cd.listarCitas()) {
                    LocalDateTime fechaCita = cita.getFecha_cita();
                    LocalDateTime fechaActual = LocalDateTime.now();
                    String fechaString = cita.getFecha_cita().format(dtf);
                    int fechaCita2 = Integer.parseInt(fechaString);
                    if (ChronoUnit.DAYS.between(fechaCita, fechaActual) > 15 && cita.getEstado() != 1 && cita.getEstado() != 2 && fechaCita2 - 1 == jMonthChooser1.getMonth()) {
                        modelo.addRow(new Object[]{cita.getId_cita(), cita.getCiudadano().getDni(), cita.getFecha_cita(), cvd.buscarCentroVacunacion(cita.getCentro_vacunacion()).getNombre()});
                    }

                }
            } catch (NullPointerException ex) {
                JOptionPane.showMessageDialog(this, "Seleccione una opcion para obtener las citas deseadas");
            }
        } else {
            borrarFilas();
        }
    }//GEN-LAST:event_jMonthChooser1PropertyChange

    private void jRBCumplidasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBCumplidasActionPerformed
        jRBCanceladas.setSelected(false);
        jRBVencidas.setSelected(false);
        
        CentroVacunacionData cvd = new CentroVacunacionData();
        CitaData cd = new CitaData();
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("MM");
        try {
            borrarFilas();
            for (Entidades.Cita cita : cd.listarCitas()) {
                String fechaString = cita.getFecha_cita().format(dtf);
                int fechaCita = Integer.parseInt(fechaString);
                if (cita.getEstado() == 1 && fechaCita - 1 == jMonthChooser1.getMonth()) {
                    modelo.addRow(new Object[]{cita.getId_cita(), cita.getCiudadano().getDni(), cita.getFecha_cita(), cvd.buscarCentroVacunacion(cita.getCentro_vacunacion()).getNombre()});
                }

            }
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Seleccione una opcion para obtener las citas deseadas");
        }
    }//GEN-LAST:event_jRBCumplidasActionPerformed

    private void jRBCanceladasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBCanceladasActionPerformed
        jRBCumplidas.setSelected(false);
        jRBVencidas.setSelected(false);

        CentroVacunacionData cvd = new CentroVacunacionData();
        CitaData cd = new CitaData();
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("MM");
        try {
            borrarFilas();
            for (Entidades.Cita cita : cd.listarCitas()) {
                String fechaString = cita.getFecha_cita().format(dtf);
                int fechaCita = Integer.parseInt(fechaString);
                if (cita.getEstado() == 2 && fechaCita - 1 == jMonthChooser1.getMonth()) {
                    modelo.addRow(new Object[]{cita.getId_cita(), cita.getCiudadano().getDni(), cita.getFecha_cita(), cvd.buscarCentroVacunacion(cita.getCentro_vacunacion()).getNombre()});
                }

            }
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Seleccione una opcion para obtener las citas deseadas");
        }
    }//GEN-LAST:event_jRBCanceladasActionPerformed

    private void jRBVencidasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBVencidasActionPerformed
        jRBCanceladas.setSelected(false);
        jRBCumplidas.setSelected(false);
        
        CentroVacunacionData cvd = new CentroVacunacionData();
        CitaData cd = new CitaData();
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("MM");
        try {
            borrarFilas();
            for (Entidades.Cita cita : cd.listarCitas()) {
                LocalDateTime fechaCita = cita.getFecha_cita();
                LocalDateTime fechaActual = LocalDateTime.now();
                String fechaString = cita.getFecha_cita().format(dtf);
                int fechaCita2 = Integer.parseInt(fechaString);
                if (ChronoUnit.DAYS.between(fechaCita, fechaActual) > 15 && cita.getEstado() != 1 && cita.getEstado() == 0 && fechaCita2 - 1 == jMonthChooser1.getMonth()) {
                    modelo.addRow(new Object[]{cita.getId_cita(), cita.getCiudadano().getDni(), cita.getFecha_cita(), cvd.buscarCentroVacunacion(cita.getCentro_vacunacion()).getNombre()});
                }

            }
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Seleccione una opcion para obtener las citas deseadas");
        }
    }//GEN-LAST:event_jRBVencidasActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private com.toedter.calendar.JMonthChooser jMonthChooser1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRBCanceladas;
    private javax.swing.JRadioButton jRBCumplidas;
    private javax.swing.JRadioButton jRBVencidas;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
